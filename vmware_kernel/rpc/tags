!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFPOOL_H	bufpool.h	2;"	d
BUFPOOL_STATE	bufpool.h	/^} BUFPOOL_STATE;$/;"	t	typeref:enum:__anon1
BUFPOOL_STATS_ENABLED	bufpool.h	15;"	d
BZERO	bufpool.h	10;"	d
CPORT	tst-network.c	12;"	d	file:
CPORT	tst-rpc.h	10;"	d
DDL_H	dll.h	8;"	d
DEINITING	bufpool.h	/^	DEINITING,$/;"	e	enum:__anon1
DEINTED	bufpool.h	/^	DEINTED,$/;"	e	enum:__anon1
DLL_ADD	dll.h	42;"	d
DLL_INIT	dll.h	30;"	d
DLL_ISEMPTY	dll.h	61;"	d
DLL_MOVE	dll.h	56;"	d
DLL_NEXT	dll.h	64;"	d
DLL_PREV	dll.h	63;"	d
DLL_REM	dll.h	35;"	d
DLL_REVADD	dll.h	49;"	d
EXES	Makefile	/^EXES = $(patsubst %.c,%,$(EXE_SRCS))$/;"	m
EXE_OBJS	Makefile	/^EXE_OBJS = $(patsubst %.c,%.o,$(EXE_SRCS))$/;"	m
EXE_SRCS	Makefile	/^EXE_SRCS = tst_threadpool.c tst-network.c tst-rpc-client.c tst-rpc-server.c$/;"	m
INITIALIZED	bufpool.h	/^	INITIALIZED   = 1,$/;"	e	enum:__anon1
IODEPTH	tst-rpc.h	6;"	d
IP	tst-network.c	10;"	d	file:
IP	tst-rpc.h	8;"	d
LDLIBS	Makefile	/^LDLIBS = -lpthread$/;"	m
MAX_BACKLOG	network.h	/^static const int MAX_BACKLOG = 16;$/;"	v
MAX_SOCKETS	network.h	/^static const int MAX_SOCKETS = 16;$/;"	v
OBJS	Makefile	/^OBJS = $(patsubst %.c,%.o,$(SRCS))$/;"	m
PAYLOADMAX	rpc.h	12;"	d
QUEUE_ISEMPTY	queue.h	18;"	d
RPC_CHAN_LOCK	rpc.h	17;"	d
RPC_CHAN_UNLOCK	rpc.h	23;"	d
RPC_GETMSGTYPE	rpc.h	61;"	d
RPC_ISREQ	rpc.h	47;"	d
RPC_IS_CONNCLOSED	rpc.h	54;"	d
RPC_MAX_MSGS	tst-rpc.h	/^	RPC_MAX_MSGS$/;"	e	enum:__anon4
RPC_MSG_SEQID	rpc.h	64;"	d
RPC_READ_MSG	tst-rpc.h	/^	RPC_READ_MSG = 32 + 1,$/;"	e	enum:__anon4
RPC_SETMSGTYPE	rpc.h	59;"	d
RPC_SETREQ	rpc.h	48;"	d
RPC_SETRESP	rpc.h	49;"	d
RPC_SET_CONNCLOSED	rpc.h	55;"	d
RPC_TYPE_RESERVED_BITS	rpc.h	57;"	d
RPC_WRITE_MSG	tst-rpc.h	/^	RPC_WRITE_MSG,$/;"	e	enum:__anon4
SPORT	tst-network.c	11;"	d	file:
SPORT	tst-rpc.h	9;"	d
SRCS	Makefile	/^SRCS = bufpool.c hash.c queue.c threadpool.c network.c rpc.c$/;"	m
TP_INITIALIZED	threadpool.h	/^	TP_INITIALIZED,$/;"	e	enum:__anon2
TP_SHUTTING	threadpool.h	/^	TP_SHUTTING,$/;"	e	enum:__anon2
TP_UNINITIALIZED	threadpool.h	/^	TP_UNINITIALIZED = 0,$/;"	e	enum:__anon2
UNINITIALIZED	bufpool.h	/^	UNINITIALIZED = 0,$/;"	e	enum:__anon1
__HASH_H__	hash.h	2;"	d
__NETWORK_H__	network.h	2;"	d
__QUEUE_H__	queue.h	2;"	d
__RPC_H__	rpc.h	2;"	d
__THREAD_POOL_H__	threadpool.h	2;"	d
__TST_RPC_H__	tst-rpc.h	2;"	d
_bufpool_get	bufpool.c	/^int _bufpool_get(bufpool_t *bp, char **bufp, int noblock, int alloc_reserve)$/;"	f
_rpc_chan_deinit	rpc.c	/^static inline void _rpc_chan_deinit(rpc_chan_t *rcp)$/;"	f	file:
_rpc_recv	rpc.c	/^static int _rpc_recv(rpc_chan_t *rcp, rpc_msg_t **msgpp)$/;"	f	file:
_rpc_recv_handler	rpc.c	/^static void _rpc_recv_handler(work_t *w, void *data)$/;"	f	file:
_rpc_response	rpc.c	/^static inline void _rpc_response(rpc_chan_t *rcp, rpc_msg_t *resp)$/;"	f	file:
_thread_pool_deinit	threadpool.c	/^void _thread_pool_deinit(thread_pool_t *tp)$/;"	f
_worker_thread	threadpool.c	/^void *_worker_thread(void *args)$/;"	f
active	threadpool.h	/^	int             active;$/;"	m	struct:thread_pool
bind	network.c	/^int bind(sock_handle_t handle, sockaddr_t *addr, socklen_t len)$/;"	f
bucket	hash.h	/^	int	bucket;$/;"	m	struct:hash_entry
buckets	hash.h	/^	dll_t		*buckets;$/;"	m	struct:hash_table
buf	tst-rpc-client.c	/^	char      *buf;$/;"	m	struct:vmk_Scsi	file:
buf	tst-rpc-server.c	/^	char    *buf;$/;"	m	struct:vmk_Scsi	file:
bufpool	bufpool.h	/^typedef struct bufpool {$/;"	s
bufpool_bufsize	bufpool.h	/^static inline size_t bufpool_bufsize(bufpool_t *bp) { return bp->bufsize; }$/;"	f
bufpool_deinit	bufpool.c	/^void bufpool_deinit(bufpool_t *bp)$/;"	f
bufpool_dump	bufpool.c	/^void bufpool_dump(bufpool_t *bp, char *msg)$/;"	f
bufpool_get	bufpool.c	/^int bufpool_get(bufpool_t *bp, char **bufp, int noblock)$/;"	f
bufpool_get_reserve	bufpool.c	/^int bufpool_get_reserve(bufpool_t *bp, char **bufp, int noblock)$/;"	f
bufpool_get_reserve_zero	bufpool.c	/^int bufpool_get_reserve_zero(bufpool_t *bp, char **bufp, int noblock)$/;"	f
bufpool_get_zero	bufpool.c	/^int bufpool_get_zero(bufpool_t *bp, char **bufp, int noblock)$/;"	f
bufpool_init	bufpool.c	/^int bufpool_init(bufpool_t *bp, char *name, size_t bufsize, size_t nbufs, size_t nmax)$/;"	f
bufpool_init_reserve	bufpool.c	/^int bufpool_init_reserve(bufpool_t *bp, char *name, size_t bufsize, size_t nbufs,$/;"	f
bufpool_main	bufpool.c	/^void bufpool_main()$/;"	f
bufpool_put	bufpool.c	/^void bufpool_put(bufpool_t *bp, char *buf)$/;"	f
bufpool_t	bufpool.h	/^} bufpool_t;$/;"	t	typeref:struct:bufpool
bufpool_task	bufpool.c	/^void bufpool_task(void *p)$/;"	f
bufsize	bufpool.h	/^	size_t			bufsize;$/;"	m	struct:bufpool
cdb	tst-rpc-client.c	/^	int       cdb[16];$/;"	m	struct:vmk_Scsi	file:
cdb	tst-rpc-server.c	/^	int     cdb[16];$/;"	m	struct:vmk_Scsi	file:
cdb	tst-rpc.h	/^	int          cdb[16];$/;"	m	struct:read_cmd
cdb	tst-rpc.h	/^	int          cdb[16];$/;"	m	struct:write_cmd
cleanup_fn_t	hash.h	/^typedef void (*cleanup_fn_t) (hash_entry_t *);$/;"	t
client_setup	network.c	/^int client_setup(char *dip, int dip_len, int dport, char *sip, int sip_len,$/;"	f
client_sock	tst-rpc-server.c	/^sock_handle_t client_sock;$/;"	v
client_thread	tst-network.c	/^void *client_thread(void *unused)$/;"	f
close	network.c	/^int close(sock_handle_t handle)$/;"	f
cmd_id	tst-rpc-client.c	/^	uint64_t  cmd_id;$/;"	m	struct:vmk_Scsi	file:
cmd_id	tst-rpc-client.c	/^uint64_t        cmd_id;$/;"	v
cmd_id	tst-rpc-server.c	/^	int     cmd_id;$/;"	m	struct:vmk_Scsi	file:
cmp	hash.h	/^	cmp_fn_t	cmp;$/;"	m	struct:hash_table
cmp_fn_t	hash.h	/^typedef int (*cmp_fn_t) (hash_entry_t *, void *opaque);$/;"	t
cond	tst-rpc-client.c	/^pthread_cond_t  cond;$/;"	v
connect	network.c	/^int connect(sock_handle_t handle, sockaddr_t *addr, socklen_t len)$/;"	f
container_of	dll.h	20;"	d
count	hash.h	/^	long		count;		\/* number of elements put on hash *\/$/;"	m	struct:hash_table
data	threadpool.h	/^	void  *data;$/;"	m	struct:work
dll_next	dll.h	/^	struct dllist	*dll_next;$/;"	m	struct:dllist	typeref:struct:dllist::dllist
dll_prev	dll.h	/^	struct dllist	*dll_prev;$/;"	m	struct:dllist	typeref:struct:dllist::dllist
dll_t	dll.h	/^typedef struct dllist dll_t;$/;"	t	typeref:struct:dllist
dllist	dll.h	/^struct dllist {$/;"	s
enabled	network.c	/^	int             enabled;$/;"	m	struct:vmware_socket	file:
enabled	rpc.h	/^	int             enabled;$/;"	m	struct:rpc_chan
free_work	threadpool.c	/^void free_work(thread_pool_t *tp, work_t *w)$/;"	f
freelist	bufpool.h	/^	struct queue		freelist;$/;"	m	struct:bufpool	typeref:struct:bufpool::queue
get_bucket	rpc.c	/^static inline int get_bucket(hash_table_t *ht, uint32_t id)$/;"	f	file:
h_entry	rpc.h	/^	hash_entry_t    h_entry;$/;"	m	struct:rpc_msg
handle	network.c	/^	sock_handle_t   handle;$/;"	m	struct:vmware_socket	file:
hash	rpc.h	/^	hash_table_t    hash;$/;"	m	struct:rpc_chan
hash_add	hash.c	/^int hash_add(hash_table_t *hash, hash_entry_t *new_entry, int bucket)$/;"	f
hash_cleanup	hash.c	/^void hash_cleanup(hash_table_t *hash, cleanup_fn_t cb)$/;"	f
hash_deinit	hash.c	/^void hash_deinit(hash_table_t *hash)$/;"	f
hash_entry	hash.h	/^typedef struct hash_entry {$/;"	s
hash_entry_init	hash.h	/^static inline void hash_entry_init(hash_entry_t *e)$/;"	f
hash_entry_t	hash.h	/^} hash_entry_t;$/;"	t	typeref:struct:hash_entry
hash_init	hash.c	/^int hash_init(hash_table_t *hash, int no_buckets, cmp_fn_t fun)$/;"	f
hash_lookup	hash.c	/^int hash_lookup(hash_table_t *hash, int bucket, hash_entry_t **entry, void *opaque)$/;"	f
hash_no_buckets	hash.h	/^static inline int hash_no_buckets(hash_table_t *hash)$/;"	f
hash_rem	hash.c	/^void hash_rem(hash_table_t *hash, hash_entry_t *entry)$/;"	f
hash_table	hash.h	/^typedef struct hash_table {$/;"	s
hash_table_t	hash.h	/^} hash_table_t;$/;"	t	typeref:struct:hash_table
hdr	rpc.h	/^	rpc_msghdr_t    hdr;$/;"	m	struct:rpc_msg
hdr	tst-rpc.h	/^	rpc_msghdr_t hdr;$/;"	m	struct:read_cmd
hdr	tst-rpc.h	/^	rpc_msghdr_t hdr;$/;"	m	struct:write_cmd
in_port_t	network.h	/^typedef uint16_t                     in_port_t;$/;"	t
is_read	tst-rpc-client.c	/^	int       is_read;$/;"	m	struct:vmk_Scsi	file:
is_read	tst-rpc-server.c	/^	int     is_read;$/;"	m	struct:vmk_Scsi	file:
issued	bufpool.h	/^	size_t			issued;$/;"	m	struct:bufpool
len	tst-rpc-client.c	/^	ssize_t   len;$/;"	m	struct:vmk_Scsi	file:
len	tst-rpc-server.c	/^	ssize_t len;$/;"	m	struct:vmk_Scsi	file:
len	tst-rpc.h	/^	ssize_t      len;$/;"	m	struct:read_cmd
len	tst-rpc.h	/^	ssize_t      len;$/;"	m	struct:write_cmd
list	hash.h	/^	dll_t	list;$/;"	m	struct:hash_entry
list	threadpool.h	/^	dll_t list;$/;"	m	struct:work
lock	bufpool.h	/^	pthread_mutex_t		lock;$/;"	m	struct:bufpool
lock	rpc.h	/^	pthread_mutex_t lock;$/;"	m	struct:rpc_chan
lock	tst-rpc-client.c	/^pthread_mutex_t lock;$/;"	v
lock	tst-rpc-server.c	/^pthread_mutex_t lock;$/;"	v
main	tst-network.c	/^int main(void)$/;"	f
main	tst-rpc-client.c	/^int main(void)$/;"	f
main	tst-rpc-server.c	/^int main(void)$/;"	f
main	tst_threadpool.c	/^int main(void)$/;"	f
mpp_req_handler	tst-rpc-client.c	/^void mpp_req_handler(rpc_msg_t *msgp)$/;"	f
mpp_resp_handler	tst-rpc-client.c	/^void mpp_resp_handler(rpc_msg_t *msgp)$/;"	f
msglen	rpc.h	/^	uint16_t msglen;$/;"	m	struct:rpc_msghdr
msgpool	rpc.h	/^	bufpool_t       msgpool;$/;"	m	struct:rpc_chan
name	bufpool.h	/^	char                    *name;$/;"	m	struct:bufpool
nbufs	bufpool.h	/^	size_t			nbufs;$/;"	m	struct:bufpool
new_scsi_command	tst-rpc-client.c	/^static inline vmk_Scsi_t *new_scsi_command(void)$/;"	f	file:
new_work	threadpool.c	/^work_t *new_work(thread_pool_t *tp)$/;"	f
nfrees	bufpool.h	/^	int			nfrees;$/;"	m	struct:bufpool
nmallocs	bufpool.h	/^	int			nmallocs;$/;"	m	struct:bufpool
nmax	bufpool.h	/^	size_t			nmax;$/;"	m	struct:bufpool
no_buckets	hash.h	/^	int		no_buckets;$/;"	m	struct:hash_table
nthreads	threadpool.h	/^	int             nthreads;$/;"	m	struct:thread_pool
offsetof	dll.h	13;"	d
offsetof	dll.h	15;"	d
opaque	rpc.h	/^	void            *opaque;$/;"	m	struct:rpc_msg
owned	bufpool.h	/^	size_t			owned;$/;"	m	struct:bufpool
payload	rpc.h	/^	char            *payload;$/;"	m	struct:rpc_msg
payloadlen	rpc.h	/^	uint16_t payloadlen;$/;"	m	struct:rpc_msghdr
ploadpool	rpc.h	/^	bufpool_t       ploadpool;$/;"	m	struct:rpc_chan
pool	bufpool.c	/^bufpool_t		pool;$/;"	v
pool	threadpool.h	/^	bufpool_t       pool;$/;"	m	struct:thread_pool
pool_state_t	threadpool.h	/^} pool_state_t;$/;"	t	typeref:enum:__anon2
print_i	tst_threadpool.c	/^void  print_i(struct work *w, void *data)$/;"	f
q_dll	queue.h	/^	dll_t	q_dll;	\/* head of the list *\/$/;"	m	struct:queue
q_len	queue.h	/^	int	q_len;	\/* number of items in the list *\/$/;"	m	struct:queue
qi_curdllp	queue.h	/^	dll_t   *qi_curdllp;	\/* serve next element *\/$/;"	m	struct:__anon3
qi_qp	queue.h	/^	queue_t *qi_qp;$/;"	m	struct:__anon3
queue	queue.h	/^typedef struct queue {$/;"	s
queue_add	queue.c	/^void queue_add(queue_t *qp, queue_entry_t *entry)$/;"	f
queue_clear	queue.c	/^void queue_clear(queue_t *qp)$/;"	f
queue_deinit	queue.c	/^void queue_deinit(queue_t *qp)$/;"	f
queue_entry_t	queue.h	/^typedef dll_t queue_entry_t;$/;"	t
queue_init	queue.c	/^void queue_init(queue_t *qp)$/;"	f
queue_iter_init	queue.c	/^void queue_iter_init(queue_iter_t *qip, queue_t *qp)$/;"	f
queue_iter_next	queue.c	/^void *queue_iter_next(queue_iter_t *qip)$/;"	f
queue_iter_t	queue.h	/^} queue_iter_t;$/;"	t	typeref:struct:__anon3
queue_rem	queue.c	/^int queue_rem(queue_t *qp, queue_entry_t **entry)$/;"	f
queue_t	queue.h	/^} queue_t;$/;"	t	typeref:struct:queue
rcp	rpc.h	/^	struct rpc_chan *rcp;$/;"	m	struct:rpc_msg	typeref:struct:rpc_msg::rpc_chan
rcp	tst-rpc-client.c	/^rpc_chan_t      *rcp;$/;"	v
rcp	tst-rpc-server.c	/^rpc_chan_t *rcp;$/;"	v
read	network.c	/^static ssize_t read(sock_handle_t handle, char *buf, size_t count)$/;"	f	file:
read_cmd	tst-rpc.h	/^	read_cmd_t  read_cmd;$/;"	m	union:__anon5
read_cmd	tst-rpc.h	/^typedef struct read_cmd {$/;"	s
read_cmd_t	tst-rpc.h	/^} read_cmd_t;$/;"	t	typeref:struct:read_cmd
recv_thread	rpc.h	/^	pthread_t       recv_thread;$/;"	m	struct:rpc_chan
rendez	bufpool.c	/^Rendez			rendez;$/;"	v
rendez	bufpool.h	/^	pthread_cond_t		rendez;$/;"	m	struct:bufpool
req_handler	rpc.h	/^	rpchandler_t    req_handler;$/;"	m	struct:rpc_chan
req_recv	tst-rpc-server.c	/^uint64_t        req_recv;$/;"	v
reserve	bufpool.h	/^	int                     reserve;$/;"	m	struct:bufpool
resp	rpc.h	/^	struct rpc_msg  *resp;$/;"	m	struct:rpc_msg	typeref:struct:rpc_msg::rpc_msg
resp_handler	rpc.h	/^	rpchandler_t    resp_handler;$/;"	m	struct:rpc_chan
responded	tst-rpc-client.c	/^uint64_t        responded;$/;"	v
rpc_async_request	rpc.c	/^int rpc_async_request(rpc_chan_t *rcp, rpc_msg_t *msgp)$/;"	f
rpc_chan	rpc.h	/^typedef struct rpc_chan {$/;"	s
rpc_chan_close	rpc.c	/^void rpc_chan_close(rpc_chan_t *rcp)$/;"	f
rpc_chan_deinit	rpc.c	/^void rpc_chan_deinit(rpc_chan_t *rcp)$/;"	f
rpc_chan_free	rpc.c	/^void rpc_chan_free(rpc_chan_t *rcp)$/;"	f
rpc_chan_init	rpc.c	/^int rpc_chan_init(rpc_chan_t *rcp, sock_handle_t socket, size_t nway,$/;"	f
rpc_chan_new	rpc.c	/^rpc_chan_t *rpc_chan_new(void)$/;"	f
rpc_chan_t	rpc.h	/^} rpc_chan_t;$/;"	t	typeref:struct:rpc_chan
rpc_maxmsg_t	tst-rpc.h	/^} rpc_maxmsg_t;$/;"	t	typeref:union:__anon5
rpc_msg	rpc.h	/^typedef struct rpc_msg {$/;"	s
rpc_msg_get	rpc.c	/^void rpc_msg_get(rpc_chan_t *rcp, int msgtype, size_t msglen, rpc_msg_t **msgpp)$/;"	f
rpc_msg_put	rpc.c	/^void rpc_msg_put(rpc_chan_t *rcp, rpc_msg_t *msgp)$/;"	f
rpc_msg_t	rpc.h	/^} rpc_msg_t;$/;"	t	typeref:struct:rpc_msg
rpc_msghdr	rpc.h	/^typedef struct rpc_msghdr {$/;"	s
rpc_msghdr_t	rpc.h	/^} rpc_msghdr_t;$/;"	t	typeref:struct:rpc_msghdr
rpc_payload_get	rpc.c	/^void rpc_payload_get(rpc_chan_t *rcp, uint16_t len, char **bufp)$/;"	f
rpc_payload_put	rpc.c	/^void rpc_payload_put(rpc_chan_t *rcp, char *buf)$/;"	f
rpc_payload_set	rpc.c	/^void rpc_payload_set(rpc_chan_t *rcp, rpc_msg_t *msgp, char *payload,$/;"	f
rpc_recv_thread	rpc.c	/^static void *rpc_recv_thread(void *args)$/;"	f	file:
rpc_response	rpc.c	/^int rpc_response(rpc_chan_t *rcp, rpc_msg_t *msgp)$/;"	f
rpchandler_t	rpc.h	/^typedef void (*rpchandler_t)(struct rpc_msg *);$/;"	t
sa_family_t	network.h	/^typedef uint8_t                      sa_family_t;$/;"	t
safe_read	network.c	/^static ssize_t safe_read(sock_handle_t handle, char *buf, size_t count)$/;"	f	file:
safe_write	network.c	/^static ssize_t safe_write(sock_handle_t handle, char *buf, size_t count)$/;"	f	file:
schedule_work	threadpool.c	/^int schedule_work(thread_pool_t *tp, work_t *w)$/;"	f
send_msgs	tst-rpc-client.c	/^void *send_msgs(void *args)$/;"	f
seqid	rpc.h	/^	uint32_t        seqid;$/;"	m	struct:rpc_chan
seqid	rpc.h	/^	uint32_t seqid;$/;"	m	struct:rpc_msghdr
seqid_cmp	rpc.c	/^static inline int seqid_cmp(hash_entry_t *e, void *opaque)$/;"	f	file:
server_req_handler	tst-rpc-server.c	/^void server_req_handler(rpc_msg_t *msgp)$/;"	f
server_resp_handler	tst-rpc-server.c	/^void server_resp_handler(rpc_msg_t *msgp)$/;"	f
server_setup	network.c	/^int server_setup(char *ip, int ip_len, int port, sock_handle_t *handle)$/;"	f
server_thread	tst-network.c	/^void *server_thread(void *unused)$/;"	f
setup_server	tst-rpc-server.c	/^int setup_server(void)$/;"	f
sock	network.c	/^	vmk_Socket      sock;$/;"	m	struct:vmware_socket	file:
sock	tst-rpc-client.c	/^sock_handle_t   sock;$/;"	v
sock	tst-rpc-server.c	/^sock_handle_t sock;$/;"	v
sock_handle_t	network.h	/^typedef int sock_handle_t;$/;"	t
sockaddr_fill	network.c	/^static inline int sockaddr_fill(sockaddr_in_t *addr, sa_family_t family,$/;"	f	file:
sockaddr_in_t	network.h	/^typedef struct   sockaddr_in         sockaddr_in_t;$/;"	t	typeref:struct:sockaddr_in
sockaddr_in_t	network.h	/^typedef struct   vmk_SocketIPAddress sockaddr_in_t;$/;"	t	typeref:struct:vmk_SocketIPAddress
sockaddr_t	network.h	/^typedef struct   sockaddr            sockaddr_t;$/;"	t	typeref:struct:sockaddr
sockaddr_t	network.h	/^typedef struct   vmk_SocketAddress   sockaddr_t;$/;"	t	typeref:struct:vmk_SocketAddress
socket	network.c	/^static sock_handle_t socket(int domain, int type, int protocol)$/;"	f	file:
socket	rpc.h	/^	sock_handle_t   socket;$/;"	m	struct:rpc_chan
socket_accept	network.c	/^int socket_accept(sock_handle_t handle, sockaddr_t *addr, socklen_t *len)$/;"	f
socket_bind	network.c	/^int socket_bind(sock_handle_t handle, sockaddr_t *addr, socklen_t len)$/;"	f
socket_close	network.c	/^int socket_close(sock_handle_t handle)$/;"	f
socket_connect	network.c	/^int socket_connect(sock_handle_t handle, sockaddr_t *addr, socklen_t len)$/;"	f
socket_create	network.c	/^int socket_create(int domain, int type, int protocol)$/;"	f
socket_listen	network.c	/^int socket_listen(sock_handle_t handle, int backlog)$/;"	f
socket_read	network.c	/^ssize_t socket_read(sock_handle_t handle, char *buf, size_t count)$/;"	f
socket_write	network.c	/^ssize_t socket_write(sock_handle_t handle, char *buf, size_t count)$/;"	f
socklen_t	network.h	/^typedef int                          socklen_t;$/;"	t
state	bufpool.h	/^	BUFPOOL_STATE		state;$/;"	m	struct:bufpool
state	threadpool.h	/^	pool_state_t    state;$/;"	m	struct:thread_pool
status	rpc.h	/^	uint16_t status;$/;"	m	struct:rpc_msghdr
taskmain	bufpool.c	/^void taskmain(int argc, char *argv[])$/;"	f
thread	tst-rpc-client.c	/^pthread_t       thread;$/;"	v
thread_pool	threadpool.h	/^typedef struct thread_pool {$/;"	s
thread_pool_deinit	threadpool.c	/^void thread_pool_deinit(thread_pool_t *tp)$/;"	f
thread_pool_init	threadpool.c	/^int thread_pool_init(thread_pool_t *tp, int nthreads)$/;"	f
thread_pool_t	threadpool.h	/^} thread_pool_t;$/;"	t	typeref:struct:thread_pool
threads	threadpool.h	/^	pthread_t       *threads;$/;"	m	struct:thread_pool
tp	rpc.h	/^	thread_pool_t   tp;$/;"	m	struct:rpc_chan
type	rpc.h	/^	uint16_t type;$/;"	m	struct:rpc_msghdr
vmk_Scsi	tst-rpc-client.c	/^typedef struct vmk_Scsi {$/;"	s	file:
vmk_Scsi	tst-rpc-server.c	/^struct vmk_Scsi {$/;"	s	file:
vmk_Scsi_t	tst-rpc-client.c	/^} vmk_Scsi_t;$/;"	t	typeref:struct:vmk_Scsi	file:
vmw_socks	network.c	/^vmware_socket_t *vmw_socks;$/;"	v
vmware_socket	network.c	/^typedef struct vmware_socket {$/;"	s	file:
vmware_socket_find_free	network.c	/^static inline vmware_socket_t *vmware_socket_find_free(void)$/;"	f	file:
vmware_socket_free	network.c	/^static inline void vmware_socket_free(vmware_socket_t *vs)$/;"	f	file:
vmware_socket_get	network.c	/^static inline vmware_socket_t *vmware_socket_get(sock_handle_t h)$/;"	f	file:
vmware_socket_sys_init	network.c	/^int vmware_socket_sys_init(void)$/;"	f
vmware_socket_t	network.c	/^} vmware_socket_t;$/;"	t	typeref:struct:vmware_socket	file:
work	threadpool.h	/^typedef struct work {$/;"	s
work_cond	threadpool.h	/^	pthread_cond_t  work_cond;$/;"	m	struct:thread_pool
work_fn	threadpool.h	/^	void  (*work_fn)(struct work *, void *data);$/;"	m	struct:work
work_list	threadpool.h	/^	dll_t           work_list;$/;"	m	struct:thread_pool
work_lock	threadpool.h	/^	pthread_mutex_t work_lock;$/;"	m	struct:thread_pool
work_pend	threadpool.h	/^	int             work_pend;$/;"	m	struct:thread_pool
work_t	threadpool.h	/^} work_t;$/;"	t	typeref:struct:work
write	network.c	/^static ssize_t write(sock_handle_t handle, char *buf, size_t count)$/;"	f	file:
write_cmd	tst-rpc.h	/^	write_cmd_t write_cmd;$/;"	m	union:__anon5
write_cmd	tst-rpc.h	/^typedef struct write_cmd {$/;"	s
write_cmd_t	tst-rpc.h	/^} write_cmd_t;$/;"	t	typeref:struct:write_cmd
